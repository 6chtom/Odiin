#ifdef __VSCODE__CPP__

// these files aren't included here in the actual build.
// it just makes the vscode linter a little happier.
#include <deque>
#include <string>
#include <sstream>

#include "app_odiin_fsm.h"

#include "cwalk.h"
#include "nrf_assert.h"
#include "nrf_log.h"

#include "app/app_odiin.h"
#include "app/app_settings.h"
#include "display/screen_ui/display_screen_ui.h"
#include "files/files_sdcard.h"
#include "global/global_strings.h"
#include "input/input_keypad.h"
#endif // __VSCODE_CPP__


namespace
{
	void MenuOptionPressedCallback(menu_option_desc_t* o, lv_group_t* group)
	{
		app::fsm::MenuOptionPressedEvent ev;
		ev.Option = o;
		app::Odiin::GetInstance()->SendEvent(ev);
	};

	void MenuOptionPressedCallbackNyi(menu_option_desc_t* o, lv_group_t* group)
	{
		NRF_LOG_INFO("Menu Option `%s` clicked, NYI", NRF_LOG_PUSH((char*)o->option));

		static const char* buttonMap[] = { "Aw, man.", "" };

		static msgbox_desc_t desc;
		desc.parent = lv_scr_act();
		desc.group = group;
		desc.message_text = "Oof, this feature isn't implemented yet. Sorry!";
		desc.button_map = buttonMap;

		ui_common_msgbox_show(&desc);
	};
}

template<size_t OPT_COUNT_MAX, size_t OPTION_STR_LEN>
class MenuBase
	: public OdiinState
{
protected:
	MenuBase()
	{
		// line up pointers for ease of use.
		for (size_t scan = 0; scan < OPT_COUNT_MAX; ++scan)
		{
			menuStrings[scan] = menuStringsData[scan];
			menuOptions[scan].option = menuStrings[scan];
		}
	}
	static constexpr size_t MENU_OPTIONS_LENGTH = OPT_COUNT_MAX;
	static constexpr size_t MENU_OPTION_STRING_LENGTH = OPTION_STR_LEN;
	menu_option_desc_t menuOptions[OPT_COUNT_MAX];
	char menuStringsData[OPT_COUNT_MAX][OPTION_STR_LEN];
	char* menuStrings[OPT_COUNT_MAX];
	size_t menuOptionCount = 0;
};

class MenuMain
	: public MenuBase<8, 24>
{
	static const uint8_t NEXT_STATE_FILES = 1;
	static const uint8_t NEXT_STATE_SETTINGS = 2;
	static const uint8_t NEXT_STATE_ABOUT = 3;
	static const uint8_t NEXT_STATE_REBOOT = 4;
	static const uint8_t NEXT_STATE_POWEROFF = 5;

	size_t CreateOptions(menu_option_desc_t* output, size_t outputLength, char** stringBuffers, size_t stringBufferLength)
	{
		ASSERT(outputLength >= 4)

		size_t index = 0;

		output[index].option = "Load Payload";
		output[index].prefix = LV_SYMBOL_SD_CARD;
		output[index].click_cb = MenuOptionPressedCallback;
		output[index].user_flags = NEXT_STATE_FILES;
		++index;

		output[index].option = "Settings";
		output[index].prefix = LV_SYMBOL_SETTINGS;
		output[index].click_cb = MenuOptionPressedCallbackNyi;
		output[index].user_flags = NEXT_STATE_SETTINGS;
		++index;

		output[index].option = "About";
		output[index].prefix = LV_SYMBOL_CHARGE;
		output[index].click_cb = MenuOptionPressedCallbackNyi;
		output[index].user_flags = NEXT_STATE_ABOUT;
		++index;

		output[index].option = "Reboot";
		output[index].prefix = LV_SYMBOL_REFRESH;
		output[index].click_cb = MenuOptionPressedCallbackNyi;
		output[index].user_flags = NEXT_STATE_REBOOT;
		++index;

		output[index].option = "Power Off";
		output[index].prefix = LV_SYMBOL_POWER;
		output[index].click_cb = MenuOptionPressedCallbackNyi;
		output[index].user_flags = NEXT_STATE_POWEROFF;
		++index;

		return index;
	}

	void entry() override
	{
		LOG_STATE_ENTER(MenuMain);
		UI_CREATE(list_menu);
		UI_ACTIVATE(list_menu, Keypad->GetInputGroup());

		menuOptionCount = CreateOptions(menuOptions, MENU_OPTIONS_LENGTH,
			menuStrings, MENU_OPTION_STRING_LENGTH);

		UI_FUNCTION(list_menu, set_options)(menuOptions, menuOptionCount);
		UI_FUNCTION(list_menu, set_title)(PRODUCT_NAME_LONG);
	}

	void exit() override
	{
		LOG_STATE_EXIT(MenuMain);
	}

	void react(MenuOptionPressedEvent const& event) override
	{
		if (event.Option->user_flags == NEXT_STATE_FILES)
		{
			transit<MenuFiles>();
		}
	}
};

class MenuFiles
	: public MenuBase<32, 64>
{
	static const uint8_t FLAG_DEFAULT_SELECT_FILE = 0;
	static const uint8_t FLAG_DEFAULT_SELECT_DIR = 1;
	static const uint8_t FLAG_DIR_UP = 2;
	static const uint8_t FLAG_PAGE_NEXT = 3;
	static const uint8_t FLAG_PAGE_PREV = 4;
	static const uint8_t FLAG_GO_HOME = 5;

	size_t paginationOffset = 0;

	static constexpr size_t PATH_SIZE_MAX = FF_LFN_BUF + 1;
	char activePath[PATH_SIZE_MAX] = { 0 };
	size_t activePathItemCount = 0;
	size_t displayedFileCount = 0;
	bool isRoot = false;

	size_t AppendDirectoryMenu(const char *path, menu_option_desc_t* output, size_t outputLength, char** stringBuffers, size_t stringBufferLength, size_t directoryOffset)
	{
		ASSERT(path != nullptr);
		ASSERT(output != nullptr);
		ASSERT(stringBuffers != nullptr);

		files::SdCard& sd = *app::Odiin::GetInstance()->GetSdCard();
		files::SdCardDirectory dir;

		size_t outputIndex = 0;

		if (sd.DirectoryOpen(dir, path))
		{
			files::SdCardFileInfo info;
			while (sd.DirectoryRead(dir, info))
			{
				//bool readOnly = (info.fattrib & AM_RDO);
				bool hidden = (info.fattrib & AM_HID);
				bool system = (info.fattrib & AM_SYS);
				bool directory = (info.fattrib & AM_DIR);
				//bool archive = (info.fattrib & AM_ARC);

				if (hidden || system)
				{
					// no interest in hidden or system files
					continue;
				}

				// skip to the offset they requested.
				if (directoryOffset > 0)
				{
					directoryOffset--;
					continue;
				}

				// copy file name to the buffer
				snprintf(stringBuffers[outputIndex], stringBufferLength, "%s", info.fname);

				// give the buffer to the option
				output[outputIndex].option = stringBuffers[outputIndex];
				output[outputIndex].click_cb = MenuOptionPressedCallback;

				if (directory)
				{
					output[outputIndex].prefix = (const void*)LV_SYMBOL_DIRECTORY;
					output[outputIndex].user_flags = FLAG_DEFAULT_SELECT_DIR;
				}
				else
				{
					output[outputIndex].prefix = (const void*)LV_SYMBOL_FILE; // I need better symbols.
					output[outputIndex].user_flags = FLAG_DEFAULT_SELECT_FILE;
				}

				++outputIndex;
				if (outputIndex >= outputLength)
				{
					break;
				}
			}
		}

		return outputIndex;
	}

	size_t CountDirectoryItems(const char* path)
	{
		ASSERT(path != nullptr);

		files::SdCard& sd = *app::Odiin::GetInstance()->GetSdCard();
		files::SdCardDirectory dir;

		size_t count = 0;

		if (sd.DirectoryOpen(dir, path))
		{
			files::SdCardFileInfo info;
			while (sd.DirectoryRead(dir, info))
			{
				bool hidden = (info.fattrib & AM_HID);
				bool system = (info.fattrib & AM_SYS);

				if (hidden || system)
				{
					// no interest in hidden or system files
					continue;
				}

				++count;
			}
		}

		return count;
	}

	size_t AppendDirectoryTopper(bool isRoot, menu_option_desc_t* output, size_t outputLength, char** stringBuffers, size_t stringBufferLength)
	{
		const size_t maxUpperPagecount = 3;
		ASSERT(outputLength >= maxUpperPagecount);

		size_t index = 0;

		if (isRoot)
		{
			output[index].option = "<Main Menu>";
			output[index].prefix = LV_SYMBOL_HOME;
			output[index].click_cb = MenuOptionPressedCallback;
			output[index].user_flags = FLAG_GO_HOME;
		}
		else
		{
			output[index].option = files::SdCard::RelativeParentDirectory;
			output[index].prefix = LV_SYMBOL_NEW_LINE;
			output[index].click_cb = MenuOptionPressedCallback;
			output[index].user_flags = FLAG_DIR_UP;
		}

		++index;

		if (paginationOffset > 0)
		{
			// we have paged in, show 'previous page' button
			output[index].option = "<Previous Page>";
			output[index].prefix = LV_SYMBOL_PREV;
			output[index].click_cb = MenuOptionPressedCallback;
			output[index].user_flags = FLAG_PAGE_PREV;
			++index;
		}

		if (activePathItemCount - paginationOffset > (MENU_OPTIONS_LENGTH - maxUpperPagecount))
		{
			// check to see if we have more items than we can display
			output[index].option = "<Next Page>";
			output[index].prefix = LV_SYMBOL_NEXT;
			output[index].click_cb = MenuOptionPressedCallback;
			output[index].user_flags = FLAG_PAGE_NEXT;
			++index;
		}

		return index;
	}

	void UpdateUI()
	{
		menuOptionCount = 0;

		size_t topperCount = AppendDirectoryTopper(isRoot,
			menuOptions, MENU_OPTIONS_LENGTH,
			menuStrings, MENU_OPTION_STRING_LENGTH);

		displayedFileCount = AppendDirectoryMenu(activePath,
			menuOptions + topperCount, MENU_OPTIONS_LENGTH - topperCount,
			menuStrings, MENU_OPTION_STRING_LENGTH,
			paginationOffset);

		menuOptionCount = topperCount + displayedFileCount;

		UI_FUNCTION(list_menu, set_options)(menuOptions, menuOptionCount);
		UI_FUNCTION(list_menu, set_title)(activePath);
	}

	//////////////////////////////////////////////////////////////////////////
	// Menu Option Handlers

	void SelectFile(const char* filename)
	{
		char fullPathBuffer[PATH_SIZE_MAX] = { 0 };

		// build our full path to the file
		UNUSED_RETURN_VALUE(cwk_path_get_absolute(activePath, filename, fullPathBuffer, PATH_SIZE_MAX));

		// set the payload
		app::Odiin::GetInstance()->SetNfcTagPayload(fullPathBuffer);
	}

	void PushDirectory(const char* directoryName)
	{
		paginationOffset = 0;
		UNUSED_RETURN_VALUE(cwk_path_get_absolute(activePath, directoryName, activePath, PATH_SIZE_MAX));
		isRoot = (strcmp(activePath, files::SdCard::RootDirectory) == 0);
		activePathItemCount = CountDirectoryItems(activePath);
		UpdateUI();
	}

	void PopDirectory()
	{
		if (isRoot)
		{
			NRF_LOG_WARNING("Tried to PopDirectory() while we are at the root.");
			return;
		}

		paginationOffset = 0;
		UNUSED_RETURN_VALUE(cwk_path_get_absolute(activePath, files::SdCard::RelativeParentDirectory, activePath, PATH_SIZE_MAX));
		isRoot = (strcmp(activePath, files::SdCard::RootDirectory) == 0);
		activePathItemCount = CountDirectoryItems(activePath);
		UpdateUI();
	}

	void PageChange(int8_t deltaPages)
	{
		paginationOffset += displayedFileCount * deltaPages;

		if (paginationOffset > activePathItemCount)
		{
			paginationOffset = 0;
		}

		UpdateUI();
	}

	//////////////////////////////////////////////////////////////////////////
	// State events

	void entry() override
	{
		LOG_STATE_ENTER(MenuFiles);

		UI_CREATE(list_menu);
		UI_ACTIVATE(list_menu, Keypad->GetInputGroup());

		// push the root path if we don't have one set.
		if (strlen(activePath) == 0)
		{
			PushDirectory(files::SdCard::RootDirectory);
		}
		else
		{
			// we entered from a state where we had a path
			// already set, just update the UI for it.
			UpdateUI();
		}
	}

	void exit() override
	{
		LOG_STATE_EXIT(MenuFiles);
	}

	void react(MenuOptionPressedEvent const& event) override
	{
		switch (event.Option->user_flags)
		{
			case FLAG_DEFAULT_SELECT_FILE:
				SelectFile(event.Option->option);
				break;
			case FLAG_DEFAULT_SELECT_DIR:
				PushDirectory(event.Option->option);
				break;
			case FLAG_DIR_UP:
				PopDirectory();
				break;
			case FLAG_PAGE_NEXT:
				PageChange(1);
				break;
			case FLAG_PAGE_PREV:
				PageChange(-1);
				break;
			case FLAG_GO_HOME:
				app::Odiin::GetInstance()->SendEvent(app::fsm::GoHomeEvent());
				break;
			default:
				NRF_LOG_WARNING("Unhandled menu option flag. (%d)", event.Option->user_flags);
				break;
		}
	}
};
